import { queryCompare } from "./abstractSyntaxTree";

export const queries: queryCompare[] = [
      {
        "id": 1,
        "origin": "SELECT * FROM CD.FACILITIES;",
        "normalized": "SELECT FACILITIES.FACID, FACILITIES.NAME, FACILITIES.MEMBERCOST, FACILITIES.GUESTCOST, FACILITIES.INITIALOUTLAY, FACILITIES.MONTHLYMAINTENANCE FROM CD.FACILITIES;"
      },
      {
        "id": 2,
        "origin": "SELECT NAME, MEMBERCOST FROM CD.FACILITIES;",
        "normalized": "SELECT FACILITIES.NAME, FACILITIES.MEMBERCOST FROM CD.FACILITIES;"
      },
      {
        "id": 3,
        "origin": "SELECT * FROM CD.FACILITIES WHERE MEMBERCOST > 0;",
        "normalized": "SELECT FACILITIES.FACID, FACILITIES.NAME, FACILITIES.MEMBERCOST, FACILITIES.GUESTCOST, FACILITIES.INITIALOUTLAY, FACILITIES.MONTHLYMAINTENANCE FROM CD.FACILITIES WHERE FACILITIES.MEMBERCOST > 0;"
      },
      {
        "id": 4,
        "origin": "SELECT FACID, NAME, MEMBERCOST, MONTHLYMAINTENANCE FROM CD.FACILITIES WHERE MEMBERCOST > 0 AND (MEMBERCOST < MONTHLYMAINTENANCE/50.0);",
        "normalized": "SELECT FACILITIES.FACID, FACILITIES.NAME, FACILITIES.MEMBERCOST, FACILITIES.MONTHLYMAINTENANCE FROM CD.FACILITIES WHERE FACILITIES.MEMBERCOST > 0 AND (FACILITIES.MEMBERCOST < FACILITIES.MONTHLYMAINTENANCE/50.0);"
      },
      {
        "id": 5,
        "origin": "SELECT * FROM CD.FACILITIES WHERE NAME LIKE '%Tennis%';",
        "normalized": "SELECT FACILITIES.FACID, FACILITIES.NAME, FACILITIES.MEMBERCOST, FACILITIES.GUESTCOST, FACILITIES.INITIALOUTLAY, FACILITIES.MONTHLYMAINTENANCE FROM CD.FACILITIES WHERE FACILITIES.NAME LIKE '%Tennis%';"
      },
      {
        "id": 6,
        "origin": "SELECT * FROM CD.FACILITIES WHERE FACID IN (1,5);",
        "normalized": "SELECT FACILITIES.FACID, FACILITIES.NAME, FACILITIES.MEMBERCOST, FACILITIES.GUESTCOST, FACILITIES.INITIALOUTLAY, FACILITIES.MONTHLYMAINTENANCE FROM CD.FACILITIES WHERE FACILITIES.FACID IN (1,5);"
      },
      {
        "id": 7,
        "origin": "SELECT NAME, CASE WHEN (MONTHLYMAINTENANCE > 100) THEN 'expensive' ELSE 'cheap' END AS COST FROM CD.FACILITIES;",
        "normalized": "SELECT FACILITIES.NAME, CASE WHEN (FACILITIES.MONTHLYMAINTENANCE > 100) THEN 'expensive' ELSE 'cheap' END AS COST FROM CD.FACILITIES;"
      },
      {
        "id": 8,
        "origin": "SELECT MEMID, SURNAME, FIRSTNAME, JOINDATE FROM CD.MEMBERS WHERE JOINDATE >= '2012-09-01';",
        "normalized": "SELECT MEMBERS.MEMID, MEMBERS.SURNAME, MEMBERS.FIRSTNAME, MEMBERS.JOINDATE FROM CD.MEMBERS WHERE MEMBERS.JOINDATE >= '2012-09-01';"
      },
      {
        "id": 9,
        "origin": "SELECT DISTINCT SURNAME FROM CD.MEMBERS ORDER BY SURNAME LIMIT 10;",
        "normalized": "SELECT DISTINCT MEMBERS.SURNAME FROM CD.MEMBERS ORDER BY MEMBERS.SURNAME LIMIT 10;"
      },
      {
        "id": 10,
        "origin": "SELECT SURNAME FROM CD.MEMBERS UNION SELECT NAME FROM CD.FACILITIES;",
        "normalized": "SELECT MEMBERS.SURNAME FROM CD.MEMBERS UNION SELECT FACILITIES.NAME FROM CD.FACILITIES;"
      },
      {
        "id": 11,
        "origin": "SELECT MAX(JOINDATE) AS LATEST FROM CD.MEMBERS;",
        "normalized": "SELECT MAX(MEMBERS.JOINDATE) AS LATEST FROM CD.MEMBERS;"
      },
      {
        "id": 12,
        "origin": "SELECT FIRSTNAME, SURNAME, JOINDATE FROM CD.MEMBERS WHERE JOINDATE = (SELECT MAX(JOINDATE) FROM CD.MEMBERS);",
        "normalized": "SELECT MEMBERS.FIRSTNAME, MEMBERS.SURNAME, MEMBERS.JOINDATE FROM CD.MEMBERS WHERE MEMBERS.JOINDATE = (SELECT MAX(MEMBERS.JOINDATE) FROM CD.MEMBERS);"
      },
      {
        "id": 13,
        "origin": "SELECT BKS.STARTTIME FROM CD.BOOKINGS BKS INNER JOIN CD.MEMBERS MEMS ON MEMS.MEMID = BKS.MEMID WHERE MEMS.FIRSTNAME='David' AND MEMS.SURNAME='Farrell';",
        "normalized": "SELECT BOOKINGS.STARTTIME FROM CD.BOOKINGS INNER JOIN CD.MEMBERS ON MEMBERS.MEMID = BOOKINGS.MEMID WHERE MEMBERS.FIRSTNAME='David' AND MEMBERS.SURNAME='Farrell';"
      },
      {
        "id": 14,
        "origin": "SELECT BKS.STARTTIME AS START, FACS.NAME AS NAME FROM CD.FACILITIES FACS INNER JOIN CD.BOOKINGS BKS ON FACS.FACID = BKS.FACID WHERE FACS.NAME IN ('Tennis Court 2','Tennis Court 1') AND BKS.STARTTIME >= '2012-09-21' AND BKS.STARTTIME < '2012-09-22' ORDER BY BKS.STARTTIME;",
        "normalized": "SELECT BOOKINGS.STARTTIME, FACILITIES.NAME FROM CD.FACILITIES INNER JOIN CD.BOOKINGS ON FACILITIES.FACID = BOOKINGS.FACID WHERE FACILITIES.NAME IN ('Tennis Court 2','Tennis Court 1') AND BOOKINGS.STARTTIME >= '2012-09-21' AND BOOKINGS.STARTTIME < '2012-09-22' ORDER BY BOOKINGS.STARTTIME;"
      },
      {
        "id": 15,
        "origin": "SELECT DISTINCT RECS.FIRSTNAME AS FIRSTNAME, RECS.SURNAME AS SURNAME FROM CD.MEMBERS MEMS INNER JOIN CD.MEMBERS RECS ON RECS.MEMID = MEMS.RECOMMENDEDBY ORDER BY SURNAME, FIRSTNAME;",
        "normalized": "SELECT DISTINCT MEMBERS.FIRSTNAME, MEMBERS.SURNAME FROM CD.MEMBERS INNER JOIN CD.MEMBERS ON MEMBERS.MEMID = MEMBERS.RECOMMENDEDBY ORDER BY MEMBERS.SURNAME, MEMBERS.FIRSTNAME;"
      },
      {
        "id": 16,
        "origin": "SELECT MEMS.FIRSTNAME AS MEMFNAME, MEMS.SURNAME AS MEMSNAME, RECS.FIRSTNAME AS RECFNAME, RECS.SURNAME AS RECSNAME FROM CD.MEMBERS MEMS LEFT OUTER JOIN CD.MEMBERS RECS ON RECS.MEMID = MEMS.RECOMMENDEDBY ORDER BY MEMSNAME, MEMFNAME;",
        "normalized": "SELECT MEMBERS.FIRSTNAME, MEMBERS.SURNAME, MEMBERS.FIRSTNAME, MEMBERS.SURNAME FROM CD.MEMBERS LEFT OUTER JOIN CD.MEMBERS ON MEMBERS.MEMID = MEMBERS.RECOMMENDEDBY ORDER BY MEMBERS.SURNAME, MEMBERS.FIRSTNAME;"
      },
      {
        "id": 17,
        "origin": "SELECT DISTINCT MEMS.FIRSTNAME || ' ' || MEMS.SURNAME AS MEMBER, FACS.NAME AS FACILITY FROM CD.MEMBERS MEMS INNER JOIN CD.BOOKINGS BKS ON MEMS.MEMID = BKS.MEMID INNER JOIN CD.FACILITIES FACS ON BKS.FACID = FACS.FACID WHERE FACS.NAME IN ('Tennis Court 2','Tennis Court 1') ORDER BY MEMBER, FACILITY;",
        "normalized": "SELECT DISTINCT MEMBERS.FIRSTNAME || ' ' || MEMBERS.SURNAME, FACILITIES.NAME FROM CD.MEMBERS INNER JOIN CD.BOOKINGS ON MEMBERS.MEMID = BOOKINGS.MEMID INNER JOIN CD.FACILITIES ON BOOKINGS.FACID = FACILITIES.FACID WHERE FACILITIES.NAME IN ('Tennis Court 2','Tennis Court 1') ORDER BY MEMBERS.SURNAME, FACILITIES.NAME;"
      },
      {
        "id": 18,
        "origin": "SELECT MEMS.FIRSTNAME || ' ' || MEMS.SURNAME AS MEMBER, FACS.NAME AS FACILITY, CASE WHEN MEMS.MEMID = 0 THEN BKS.SLOTS*FACS.GUESTCOST ELSE BKS.SLOTS*FACS.MEMBERCOST END AS COST FROM CD.MEMBERS MEMS INNER JOIN CD.BOOKINGS BKS ON MEMS.MEMID = BKS.MEMID INNER JOIN CD.FACILITIES FACS ON BKS.FACID = FACS.FACID WHERE BKS.STARTTIME >= '2012-09-14' AND BKS.STARTTIME < '2012-09-15' AND ( (MEMS.MEMID = 0 AND BKS.SLOTS*FACS.GUESTCOST > 30) OR (MEMS.MEMID != 0 AND BKS.SLOTS*FACS.MEMBERCOST > 30) ) ORDER BY COST DESC;",
        "normalized": "SELECT MEMBERS.FIRSTNAME || ' ' || MEMBERS.SURNAME, FACILITIES.NAME, CASE WHEN MEMBERS.MEMID = 0 THEN BOOKINGS.SLOTS*FACILITIES.GUESTCOST ELSE BOOKINGS.SLOTS*FACILITIES.MEMBERCOST END AS COST FROM CD.MEMBERS INNER JOIN CD.BOOKINGS ON MEMBERS.MEMID = BOOKINGS.MEMID INNER JOIN CD.FACILITIES ON BOOKINGS.FACID = FACILITIES.FACID WHERE BOOKINGS.STARTTIME >= '2012-09-14' AND BOOKINGS.STARTTIME < '2012-09-15' AND ( (MEMBERS.MEMID = 0 AND BOOKINGS.SLOTS*FACILITIES.GUESTCOST > 30) OR (MEMBERS.MEMID != 0 AND BOOKINGS.SLOTS*FACILITIES.MEMBERCOST > 30) ) ORDER BY COST DESC;"
      },
      {
        "id": 19,
        "origin": "SELECT DISTINCT MEMS.FIRSTNAME || ' ' || MEMS.SURNAME AS MEMBER, (SELECT RECS.FIRSTNAME || ' ' || RECS.SURNAME AS RECOMMENDER FROM CD.MEMBERS RECS WHERE RECS.MEMID = MEMS.RECOMMENDEDBY ) FROM CD.MEMBERS MEMS ORDER BY MEMBER;",
        "normalized": "SELECT DISTINCT MEMBERS.FIRSTNAME || ' ' || MEMBERS.SURNAME, (SELECT MEMBERS.FIRSTNAME || ' ' || MEMBERS.SURNAME FROM CD.MEMBERS WHERE MEMBERS.MEMID = MEMBERS.RECOMMENDEDBY ) FROM CD.MEMBERS ORDER BY MEMBERS.SURNAME;"
      },
      {
        "id": 20,
        "origin": "SELECT MEMBER, FACILITY, COST FROM ( SELECT MEMS.FIRSTNAME || ' ' || MEMS.SURNAME AS MEMBER, FACS.NAME AS FACILITY, CASE WHEN MEMS.MEMID = 0 THEN BKS.SLOTS*FACS.GUESTCOST ELSE BKS.SLOTS*FACS.MEMBERCOST END AS COST FROM CD.MEMBERS MEMS INNER JOIN CD.BOOKINGS BKS ON MEMS.MEMID = BKS.MEMID INNER JOIN CD.FACILITIES FACS ON BKS.FACID = FACS.FACID WHERE BKS.STARTTIME >= '2012-09-14' AND BKS.STARTTIME < '2012-09-15' ) AS BOOKINGS WHERE COST > 30 ORDER BY COST DESC;",
        "normalized": "SELECT MEMBERS.SURNAME, FACILITIES.NAME, COST FROM ( SELECT MEMBERS.FIRSTNAME || ' ' || MEMBERS.SURNAME, FACILITIES.NAME, CASE WHEN MEMBERS.MEMID = 0 THEN BOOKINGS.SLOTS*FACILITIES.GUESTCOST ELSE BOOKINGS.SLOTS*FACILITIES.MEMBERCOST END AS COST FROM CD.MEMBERS INNER JOIN CD.BOOKINGS ON MEMBERS.MEMID = BOOKINGS.MEMID INNER JOIN CD.FACILITIES ON BOOKINGS.FACID = FACILITIES.FACID WHERE BOOKINGS.STARTTIME >= '2012-09-14' AND BOOKINGS.STARTTIME < '2012-09-15' ) AS BOOKINGS WHERE COST > 30 ORDER BY COST DESC;"
      },
      {
        "id": 21,
        "origin": "INSERT INTO CD.FACILITIES (FACID, NAME, MEMBERCOST, GUESTCOST, INITIALOUTLAY, MONTHLYMAINTENANCE) VALUES (9, 'Spa', 20, 30, 100000, 800);",
        "normalized": "INSERT INTO CD.FACILITIES (FACID, NAME, MEMBERCOST, GUESTCOST, INITIALOUTLAY, MONTHLYMAINTENANCE) VALUES (9, 'Spa', 20, 30, 100000, 800);"
      },
      {
        "id": 22,
        "origin": "INSERT INTO CD.FACILITIES (FACID, NAME, MEMBERCOST, GUESTCOST, INITIALOUTLAY, MONTHLYMAINTENANCE) VALUES (9, 'Spa', 20, 30, 100000, 800), (10, 'Squash Court 2', 3.5, 17.5, 5000, 80);",
        "normalized": "INSERT INTO CD.FACILITIES (FACID, NAME, MEMBERCOST, GUESTCOST, INITIALOUTLAY, MONTHLYMAINTENANCE) VALUES (9, 'Spa', 20, 30, 100000, 800), (10, 'Squash Court 2', 3.5, 17.5, 5000, 80);"
      },
      {
        "id": 23,
        "origin": "INSERT INTO CD.FACILITIES (FACID, NAME, MEMBERCOST, GUESTCOST, INITIALOUTLAY, MONTHLYMAINTENANCE) SELECT (SELECT MAX(FACID) FROM CD.FACILITIES)+1, 'Spa', 20, 30, 100000, 800;",
        "normalized": "INSERT INTO CD.FACILITIES (FACID, NAME, MEMBERCOST, GUESTCOST, INITIALOUTLAY, MONTHLYMAINTENANCE) SELECT (SELECT MAX(FACID) FROM CD.FACILITIES)+1, 'Spa', 20, 30, 100000, 800;"
      },
      {
        "id": 24,
        "origin": "UPDATE CD.FACILITIES SET INITIALOUTLAY = 10000 WHERE FACID = 1;",
        "normalized": "UPDATE CD.FACILITIES SET FACILITIES.INITIALOUTLAY = 10000 WHERE FACILITIES.FACID = 1;"
      },
      {
        "id": 25,
        "origin": "UPDATE CD.FACILITIES SET MEMBERCOST = 6, GUESTCOST = 30 WHERE FACID IN (0,1);",
        "normalized": "UPDATE CD.FACILITIES SET FACILITIES.MEMBERCOST = 6, FACILITIES.GUESTCOST = 30 WHERE FACILITIES.FACID IN (0,1);"
      },
      {
        "id": 26,
        "origin": "UPDATE CD.FACILITIES FACS SET MEMBERCOST = (SELECT MEMBERCOST * 1.1 FROM CD.FACILITIES WHERE FACID = 0), GUESTCOST = (SELECT GUESTCOST * 1.1 FROM CD.FACILITIES WHERE FACID = 0) WHERE FACS.FACID = 1;",
        "normalized": "UPDATE CD.FACILITIES SET FACILITIES.MEMBERCOST = (SELECT FACILITIES.MEMBERCOST * 1.1 FROM CD.FACILITIES WHERE FACILITIES.FACID = 0), FACILITIES.GUESTCOST = (SELECT FACILITIES.GUESTCOST * 1.1 FROM CD.FACILITIES WHERE FACILITIES.FACID = 0) WHERE FACILITIES.FACID = 1;"
      },
      {
        "id": 27,
        "origin": "DELETE FROM CD.BOOKINGS;",
        "normalized": "DELETE FROM CD.BOOKINGS;"
      },
      {
        "id": 28,
        "origin": "DELETE FROM CD.MEMBERS WHERE MEMID = 37;",
        "normalized": "DELETE FROM CD.MEMBERS WHERE MEMBERS.MEMID = 37;"
      },
      {
        "id": 29,
        "origin": "DELETE FROM CD.MEMBERS WHERE MEMID NOT IN (SELECT MEMID FROM CD.BOOKINGS);",
        "normalized": "DELETE FROM CD.MEMBERS WHERE MEMBERS.MEMID NOT IN (SELECT MEMBERS.MEMID FROM CD.BOOKINGS);"
      },
      {
        "id": 30,
        "origin": "SELECT COUNT(*) FROM CD.FACILITIES;",
        "normalized": "SELECT COUNT(*) FROM CD.FACILITIES;"
      },
      {
        "id": 31,
        "origin": "SELECT COUNT(*) FROM CD.FACILITIES WHERE GUESTCOST >= 10;",
        "normalized": "SELECT COUNT(*) FROM CD.FACILITIES WHERE FACILITIES.GUESTCOST >= 10;"
      },
      {
        "id": 32,
        "origin": "SELECT RECOMMENDEDBY, COUNT(*) FROM CD.MEMBERS WHERE RECOMMENDEDBY IS NOT NULL GROUP BY RECOMMENDEDBY ORDER BY RECOMMENDEDBY;",
        "normalized": "SELECT MEMBERS.RECOMMENDEDBY, COUNT(*) FROM CD.MEMBERS WHERE MEMBERS.RECOMMENDEDBY IS NOT NULL GROUP BY MEMBERS.RECOMMENDEDBY ORDER BY MEMBERS.RECOMMENDEDBY;"
      },
      {
        "id": 33,
        "origin": "SELECT FACID, SUM(SLOTS) AS \"TOTAL SLOTS\" FROM CD.BOOKINGS GROUP BY FACID ORDER BY FACID;",
        "normalized": "SELECT BOOKINGS.FACID, SUM(BOOKINGS.SLOTS) AS \"TOTAL BOOKINGS.SLOTS\" FROM CD.BOOKINGS GROUP BY BOOKINGS.FACID ORDER BY BOOKINGS.FACID;"
      },
      {
        "id": 34,
        "origin": "SELECT FACID, SUM(SLOTS) AS \"TOTAL SLOTS\" FROM CD.BOOKINGS WHERE STARTTIME >= '2012-09-01' AND STARTTIME < '2012-10-01' GROUP BY FACID ORDER BY SUM(SLOTS);",
        "normalized": "SELECT BOOKINGS.FACID, SUM(BOOKINGS.SLOTS) AS \"TOTAL BOOKINGS.SLOTS\" FROM CD.BOOKINGS WHERE BOOKINGS.STARTTIME >= '2012-09-01' AND BOOKINGS.STARTTIME < '2012-10-01' GROUP BY BOOKINGS.FACID ORDER BY SUM(BOOKINGS.SLOTS);"
      },
      {
        "id": 35,
        "origin": "SELECT FACID, EXTRACT(MONTH FROM STARTTIME) AS MONTH, SUM(SLOTS) AS \"TOTAL SLOTS\" FROM CD.BOOKINGS WHERE EXTRACT(YEAR FROM STARTTIME) = 2012 GROUP BY FACID, MONTH ORDER BY FACID, MONTH;",
        "normalized": "SELECT BOOKINGS.FACID, EXTRACT(MONTH FROM BOOKINGS.STARTTIME) AS MONTH, SUM(BOOKINGS.SLOTS) AS \"TOTAL BOOKINGS.SLOTS\" FROM CD.BOOKINGS WHERE EXTRACT(YEAR FROM BOOKINGS.STARTTIME) = 2012 GROUP BY BOOKINGS.FACID, MONTH ORDER BY BOOKINGS.FACID, MONTH;"
      },
      {
        "id": 36,
        "origin": "SELECT COUNT(DISTINCT MEMID) FROM CD.BOOKINGS;",
        "normalized": "SELECT COUNT(DISTINCT BOOKINGS.MEMID) FROM CD.BOOKINGS;"
      },
      {
        "id": 37,
        "origin": "SELECT FACID, SUM(SLOTS) AS \"TOTAL SLOTS\" FROM CD.BOOKINGS GROUP BY FACID HAVING SUM(SLOTS) > 1000 ORDER BY FACID;",
        "normalized": "SELECT BOOKINGS.FACID, SUM(BOOKINGS.SLOTS) AS \"TOTAL BOOKINGS.SLOTS\" FROM CD.BOOKINGS GROUP BY BOOKINGS.FACID HAVING SUM(BOOKINGS.SLOTS) > 1000 ORDER BY BOOKINGS.FACID;"
      },
      {
        "id": 38,
        "origin": "SELECT FACS.NAME, SUM(SLOTS * CASE WHEN MEMID = 0 THEN FACS.GUESTCOST ELSE FACS.MEMBERCOST END) AS REVENUE FROM CD.BOOKINGS BKS INNER JOIN CD.FACILITIES FACS ON BKS.FACID = FACS.FACID GROUP BY FACS.NAME ORDER BY REVENUE;",
        "normalized": "SELECT FACILITIES.NAME, SUM(BOOKINGS.SLOTS * CASE WHEN BOOKINGS.MEMID = 0 THEN FACILITIES.GUESTCOST ELSE FACILITIES.MEMBERCOST END) AS REVENUE FROM CD.BOOKINGS INNER JOIN CD.FACILITIES ON BOOKINGS.FACID = FACILITIES.FACID GROUP BY FACILITIES.NAME ORDER BY REVENUE;"
      },
      {
        "id": 39,
        "origin": "SELECT NAME, REVENUE FROM ( SELECT FACS.NAME, SUM(CASE WHEN MEMID = 0 THEN SLOTS * FACS.GUESTCOST ELSE SLOTS * MEMBERCOST END) AS REVENUE FROM CD.BOOKINGS BKS INNER JOIN CD.FACILITIES FACS ON BKS.FACID = FACS.FACID GROUP BY FACS.NAME ) AS AGG WHERE REVENUE < 1000 ORDER BY REVENUE;",
        "normalized": "SELECT FACILITIES.NAME, REVENUE FROM ( SELECT FACILITIES.NAME, SUM(CASE WHEN BOOKINGS.MEMID = 0 THEN BOOKINGS.SLOTS * FACILITIES.GUESTCOST ELSE BOOKINGS.SLOTS * FACILITIES.MEMBERCOST END) AS REVENUE FROM CD.BOOKINGS INNER JOIN CD.FACILITIES ON BOOKINGS.FACID = FACILITIES.FACID GROUP BY FACILITIES.NAME ) AS AGG WHERE REVENUE < 1000 ORDER BY REVENUE;"
      },
      {
        "id": 40,
        "origin": "SELECT FACID, SUM(SLOTS) AS \"TOTAL SLOTS\" FROM CD.BOOKINGS GROUP BY FACID ORDER BY SUM(SLOTS) DESC LIMIT 1;",
        "normalized": "SELECT BOOKINGS.FACID, SUM(BOOKINGS.SLOTS) AS \"TOTAL BOOKINGS.SLOTS\" FROM CD.BOOKINGS GROUP BY BOOKINGS.FACID ORDER BY SUM(BOOKINGS.SLOTS) DESC LIMIT 1;"
      },
      {
        "id": 41,
        "origin": "SELECT FACID, EXTRACT(MONTH FROM STARTTIME) AS MONTH, SUM(SLOTS) AS SLOTS FROM CD.BOOKINGS WHERE STARTTIME >= '2012-01-01' AND STARTTIME < '2013-01-01' GROUP BY ROLLUP(FACID, MONTH) ORDER BY FACID, MONTH;",
        "normalized": "SELECT BOOKINGS.FACID, EXTRACT(MONTH FROM BOOKINGS.STARTTIME) AS MONTH, SUM(BOOKINGS.SLOTS) AS SLOTS FROM CD.BOOKINGS WHERE BOOKINGS.STARTTIME >= '2012-01-01' AND BOOKINGS.STARTTIME < '2013-01-01' GROUP BY ROLLUP(BOOKINGS.FACID, MONTH) ORDER BY BOOKINGS.FACID, MONTH;"
      },
      {
        "id": 42,
        "origin": "SELECT FACS.FACID, FACS.NAME, TRIM(TO_CHAR(SUM(BKS.SLOTS)/2.0, '9999999999999999D99')) AS \"TOTAL HOURS\" FROM CD.BOOKINGS BKS INNER JOIN CD.FACILITIES FACS ON FACS.FACID = BKS.FACID GROUP BY FACS.FACID, FACS.NAME ORDER BY FACS.FACID;",
        "normalized": "SELECT FACILITIES.FACID, FACILITIES.NAME, TRIM(TO_CHAR(SUM(BOOKINGS.SLOTS)/2.0, '9999999999999999D99')) AS \"TOTAL HOURS\" FROM CD.BOOKINGS INNER JOIN CD.FACILITIES ON FACILITIES.FACID = BOOKINGS.FACID GROUP BY FACILITIES.FACID, FACILITIES.NAME ORDER BY FACILITIES.FACID;"
      },
      {
        "id": 43,
        "origin": "SELECT MEMS.SURNAME, MEMS.FIRSTNAME, MEMS.MEMID, MIN(BKS.STARTTIME) AS STARTTIME FROM CD.BOOKINGS BKS INNER JOIN CD.MEMBERS MEMS ON MEMS.MEMID = BKS.MEMID WHERE STARTTIME >= '2012-09-01' GROUP BY MEMS.SURNAME, MEMS.FIRSTNAME, MEMS.MEMID ORDER BY MEMS.MEMID;",
        "normalized": "SELECT MEMBERS.SURNAME, MEMBERS.FIRSTNAME, MEMBERS.MEMID, MIN(BOOKINGS.STARTTIME) AS STARTTIME FROM CD.BOOKINGS INNER JOIN CD.MEMBERS ON MEMBERS.MEMID = BOOKINGS.MEMID WHERE BOOKINGS.STARTTIME >= '2012-09-01' GROUP BY MEMBERS.SURNAME, MEMBERS.FIRSTNAME, MEMBERS.MEMID ORDER BY MEMBERS.MEMID;"
      },
      {
        "id": 44,
        "origin": "SELECT COUNT(*) OVER(), FIRSTNAME, SURNAME FROM CD.MEMBERS ORDER BY JOINDATE;",
        "normalized": "SELECT COUNT(*) OVER(), MEMBERS.FIRSTNAME, MEMBERS.SURNAME FROM CD.MEMBERS ORDER BY MEMBERS.JOINDATE;"
      },
      {
        "id": 45,
        "origin": "SELECT ROW_NUMBER() OVER(ORDER BY JOINDATE), FIRSTNAME, SURNAME FROM CD.MEMBERS ORDER BY JOINDATE;",
        "normalized": "SELECT ROW_NUMBER() OVER(ORDER BY MEMBERS.JOINDATE), MEMBERS.FIRSTNAME, MEMBERS.SURNAME FROM CD.MEMBERS ORDER BY MEMBERS.JOINDATE;"
      },
      {
        "id": 46,
        "origin": "SELECT FACID, TOTAL FROM ( SELECT FACID, SUM(SLOTS) TOTAL, RANK() OVER (ORDER BY SUM(SLOTS) DESC) RANK FROM CD.BOOKINGS GROUP BY FACID ) AS RANKED WHERE RANK = 1;",
        "normalized": "SELECT BOOKINGS.FACID, TOTAL FROM ( SELECT BOOKINGS.FACID, SUM(BOOKINGS.SLOTS) TOTAL, RANK() OVER (ORDER BY SUM(BOOKINGS.SLOTS) DESC) RANK FROM CD.BOOKINGS GROUP BY BOOKINGS.FACID ) AS RANKED WHERE RANK = 1;"
      },
      {
        "id": 47,
        "origin": "SELECT FIRSTNAME, SURNAME, ((SUM(BKS.SLOTS)+10)/20)*10 AS HOURS, RANK() OVER (ORDER BY ((SUM(BKS.SLOTS)+10)/20)*10 DESC) AS RANK FROM CD.BOOKINGS BKS INNER JOIN CD.MEMBERS MEMS ON BKS.MEMID = MEMS.MEMID GROUP BY MEMS.MEMID ORDER BY RANK, SURNAME, FIRSTNAME;",
        "normalized": "SELECT MEMBERS.FIRSTNAME, MEMBERS.SURNAME, ((SUM(BOOKINGS.SLOTS)+10)/20)*10 AS HOURS, RANK() OVER (ORDER BY ((SUM(BOOKINGS.SLOTS)+10)/20)*10 DESC) AS RANK FROM CD.BOOKINGS INNER JOIN CD.MEMBERS ON BOOKINGS.MEMID = MEMBERS.MEMID GROUP BY MEMBERS.MEMID ORDER BY RANK, MEMBERS.SURNAME, MEMBERS.FIRSTNAME;"
      },
      {
        "id": 48,
        "origin": "SELECT NAME, RANK FROM ( SELECT FACS.NAME AS NAME, RANK() OVER (ORDER BY SUM(CASE WHEN MEMID = 0 THEN SLOTS * FACS.GUESTCOST ELSE SLOTS * MEMBERCOST END) DESC) AS RANK FROM CD.BOOKINGS BKS INNER JOIN CD.FACILITIES FACS ON BKS.FACID = FACS.FACID GROUP BY FACS.NAME ) AS SUBQ WHERE RANK <= 3 ORDER BY RANK;",
        "normalized": "SELECT FACILITIES.NAME, RANK FROM ( SELECT FACILITIES.NAME, RANK() OVER (ORDER BY SUM(CASE WHEN BOOKINGS.MEMID = 0 THEN BOOKINGS.SLOTS * FACILITIES.GUESTCOST ELSE BOOKINGS.SLOTS * FACILITIES.MEMBERCOST END) DESC) AS RANK FROM CD.BOOKINGS INNER JOIN CD.FACILITIES ON BOOKINGS.FACID = FACILITIES.FACID GROUP BY FACILITIES.NAME ) AS SUBQ WHERE RANK <= 3 ORDER BY RANK;"
      },
      {
        "id": 49,
        "origin": "SELECT FACS.NAME AS NAME, FACS.INITIALOUTLAY/((SUM(CASE WHEN MEMID = 0 THEN SLOTS * FACS.GUESTCOST ELSE SLOTS * MEMBERCOST END)/3) - FACS.MONTHLYMAINTENANCE) AS MONTHS FROM CD.BOOKINGS BKS INNER JOIN CD.FACILITIES FACS ON BKS.FACID = FACS.FACID GROUP BY FACS.FACID ORDER BY NAME;",
        "normalized": "SELECT FACILITIES.NAME, FACILITIES.INITIALOUTLAY/((SUM(CASE WHEN BOOKINGS.MEMID = 0 THEN BOOKINGS.SLOTS * FACILITIES.GUESTCOST ELSE BOOKINGS.SLOTS * FACILITIES.MEMBERCOST END)/3) - FACILITIES.MONTHLYMAINTENANCE) AS MONTHS FROM CD.BOOKINGS INNER JOIN CD.FACILITIES ON BOOKINGS.FACID = FACILITIES.FACID GROUP BY FACILITIES.FACID ORDER BY FACILITIES.NAME;"
      },
      {
        "id": 50,
        "origin": "SELECT DATEGEN.DATE, ( SELECT SUM(CASE WHEN MEMID = 0 THEN SLOTS * FACS.GUESTCOST ELSE SLOTS * MEMBERCOST END) AS REV FROM CD.BOOKINGS BKS INNER JOIN CD.FACILITIES FACS ON BKS.FACID = FACS.FACID WHERE BKS.STARTTIME > DATEGEN.DATE - (INTERVAL '14 days') AND BKS.STARTTIME < DATEGEN.DATE + (INTERVAL '1 day') )/15 AS REVENUE FROM ( SELECT CAST(GENERATE_SERIES(TIMESTAMP '2012-08-01', '2012-08-31','1 day') AS DATE) AS DATE ) AS DATEGEN ORDER BY DATEGEN.DATE;",
        "normalized": "SELECT DATEGEN.DATE, ( SELECT SUM(CASE WHEN BOOKINGS.MEMID = 0 THEN BOOKINGS.SLOTS * FACILITIES.GUESTCOST ELSE BOOKINGS.SLOTS * FACILITIES.MEMBERCOST END) AS REV FROM CD.BOOKINGS INNER JOIN CD.FACILITIES ON BOOKINGS.FACID = FACILITIES.FACID WHERE BOOKINGS.STARTTIME > DATEGEN.DATE - (INTERVAL '14 days') AND BOOKINGS.STARTTIME < DATEGEN.DATE + (INTERVAL '1 day') )/15 AS REVENUE FROM ( SELECT CAST(GENERATE_SERIES(TIMESTAMP '2012-08-01', '2012-08-31','1 day') AS DATE) AS DATE ) AS DATEGEN ORDER BY DATEGEN.DATE;"
      },
      {
        "id": 51,
        "origin": "SELECT TIMESTAMP '2012-08-31 01:00:00';",
        "normalized": "SELECT TIMESTAMP '2012-08-31 01:00:00';"
      },
      {
        "id": 52,
        "origin": "SELECT TIMESTAMP '2012-08-31 01:00:00' - TIMESTAMP '2012-07-30 01:00:00' AS INTERVAL;",
        "normalized": "SELECT TIMESTAMP '2012-08-31 01:00:00' - TIMESTAMP '2012-07-30 01:00:00' AS INTERVAL;"
      },
      {
        "id": 53,
        "origin": "SELECT GENERATE_SERIES(TIMESTAMP '2012-10-01', TIMESTAMP '2012-10-31', INTERVAL '1 day') AS TS;",
        "normalized": "SELECT GENERATE_SERIES(TIMESTAMP '2012-10-01', TIMESTAMP '2012-10-31', INTERVAL '1 day') AS TS;"
      },
      {
        "id": 54,
        "origin": "SELECT EXTRACT(DAY FROM TIMESTAMP '2012-08-31');",
        "normalized": "SELECT EXTRACT(DAY FROM TIMESTAMP '2012-08-31');"
      },
      {
        "id": 55,
        "origin": "SELECT EXTRACT(EPOCH FROM (TIMESTAMP '2012-09-02 00:00:00' - '2012-08-31 01:00:00'));",
        "normalized": "SELECT EXTRACT(EPOCH FROM (TIMESTAMP '2012-09-02 00:00:00' - '2012-08-31 01:00:00'));"
      },
      {
        "id": 56,
        "origin": "SELECT EXTRACT(MONTH FROM CAL.MONTH) AS MONTH, (CAL.MONTH + INTERVAL '1 month') - CAL.MONTH AS LENGTH FROM ( SELECT GENERATE_SERIES(TIMESTAMP '2012-01-01', TIMESTAMP '2012-12-01', INTERVAL '1 month') AS MONTH ) CAL ORDER BY MONTH;",
        "normalized": "SELECT EXTRACT(MONTH FROM CAL.MONTH) AS MONTH, (CAL.MONTH + INTERVAL '1 month') - CAL.MONTH AS LENGTH FROM ( SELECT GENERATE_SERIES(TIMESTAMP '2012-01-01', TIMESTAMP '2012-12-01', INTERVAL '1 month') AS MONTH ) CAL ORDER BY MONTH;"
      },
      {
        "id": 57,
        "origin": "SELECT (DATE_TRUNC('month',TS.TESTTS) + INTERVAL '1 month') - DATE_TRUNC('day', TS.TESTTS) AS REMAINING FROM (SELECT TIMESTAMP '2012-02-11 01:00:00' AS TESTTS) TS;",
        "normalized": "SELECT (DATE_TRUNC('month',TS.TESTTS) + INTERVAL '1 month') - DATE_TRUNC('day', TS.TESTTS) AS REMAINING FROM (SELECT TIMESTAMP '2012-02-11 01:00:00' AS TESTTS) TS;"
      },
      {
        "id": 58,
        "origin": "SELECT STARTTIME, STARTTIME + SLOTS*(INTERVAL '30 minutes') ENDTIME FROM CD.BOOKINGS ORDER BY ENDTIME DESC, STARTTIME DESC LIMIT 10;",
        "normalized": "SELECT BOOKINGS.STARTTIME, BOOKINGS.STARTTIME + BOOKINGS.SLOTS*(INTERVAL '30 minutes') ENDTIME FROM CD.BOOKINGS ORDER BY ENDTIME DESC, BOOKINGS.STARTTIME DESC LIMIT 10;"
      },
      {
        "id": 59,
        "origin": "SELECT DATE_TRUNC('month', STARTTIME) AS MONTH, COUNT(*) FROM CD.BOOKINGS GROUP BY MONTH ORDER BY MONTH;",
        "normalized": "SELECT DATE_TRUNC('month', BOOKINGS.STARTTIME) AS MONTH, COUNT(*) FROM CD.BOOKINGS GROUP BY MONTH ORDER BY MONTH;"
      },
      {
        "id": 60,
        "origin": "SELECT NAME, MONTH, ROUND((100*SLOTS)/ CAST( 25*(CAST((MONTH + INTERVAL '1 month') AS DATE) - CAST (MONTH AS DATE)) AS NUMERIC),1) AS UTILISATION FROM ( SELECT FACS.NAME AS NAME, DATE_TRUNC('month', STARTTIME) AS MONTH, SUM(SLOTS) AS SLOTS FROM CD.BOOKINGS BKS INNER JOIN CD.FACILITIES FACS ON BKS.FACID = FACS.FACID GROUP BY FACS.FACID, MONTH ) AS INN ORDER BY NAME, MONTH;",
        "normalized": "SELECT FACILITIES.NAME, MONTH, ROUND((100*BOOKINGS.SLOTS)/ CAST( 25*(CAST((MONTH + INTERVAL '1 month') AS DATE) - CAST (MONTH AS DATE)) AS NUMERIC),1) AS UTILISATION FROM ( SELECT FACILITIES.NAME, DATE_TRUNC('month', BOOKINGS.STARTTIME) AS MONTH, SUM(BOOKINGS.SLOTS) AS SLOTS FROM CD.BOOKINGS INNER JOIN CD.FACILITIES ON BOOKINGS.FACID = FACILITIES.FACID GROUP BY FACILITIES.FACID, MONTH ) AS INN ORDER BY FACILITIES.NAME, MONTH;"
      },
      {
        "id": 61,
        "origin": "SELECT SURNAME || ', ' || FIRSTNAME AS NAME FROM CD.MEMBERS;",
        "normalized": "SELECT MEMBERS.SURNAME || ', ' || MEMBERS.FIRSTNAME FROM CD.MEMBERS;"
      },
      {
        "id": 62,
        "origin": "SELECT * FROM CD.FACILITIES WHERE NAME LIKE 'Tennis%';",
        "normalized": "SELECT FACILITIES.FACID, FACILITIES.NAME, FACILITIES.MEMBERCOST, FACILITIES.GUESTCOST, FACILITIES.INITIALOUTLAY, FACILITIES.MONTHLYMAINTENANCE FROM CD.FACILITIES WHERE FACILITIES.NAME LIKE 'Tennis%';"
      },
      {
        "id": 63,
        "origin": "SELECT * FROM CD.FACILITIES WHERE UPPER(NAME) LIKE 'TENNIS%';",
        "normalized": "SELECT FACILITIES.FACID, FACILITIES.NAME, FACILITIES.MEMBERCOST, FACILITIES.GUESTCOST, FACILITIES.INITIALOUTLAY, FACILITIES.MONTHLYMAINTENANCE FROM CD.FACILITIES WHERE UPPER(FACILITIES.NAME) LIKE 'TENNIS%';"
      },
      {
        "id": 64,
        "origin": "SELECT LPAD(CAST(ZIPCODE AS CHAR(5)),5,'0') ZIP FROM CD.MEMBERS ORDER BY ZIP;",
        "normalized": "SELECT LPAD(CAST(MEMBERS.ZIPCODE AS CHAR(5)),5,'0') ZIP FROM CD.MEMBERS ORDER BY ZIP;"
      },
      {
        "id": 65,
        "origin": "SELECT SUBSTR (MEMS.SURNAME,1,1) AS LETTER, COUNT(*) AS COUNT FROM CD.MEMBERS MEMS GROUP BY LETTER ORDER BY LETTER;",
        "normalized": "SELECT SUBSTR (MEMBERS.SURNAME,1,1) AS LETTER, COUNT(*) AS COUNT FROM CD.MEMBERS GROUP BY LETTER ORDER BY LETTER;"
      },
      {
        "id": 66,
        "origin": "SELECT MEMID, TRANSLATE(TELEPHONE, '-() ', '') AS TELEPHONE FROM CD.MEMBERS ORDER BY MEMID;",
        "normalized": "SELECT MEMBERS.MEMID, TRANSLATE(MEMBERS.TELEPHONE, '-() ', '') AS TELEPHONE FROM CD.MEMBERS ORDER BY MEMBERS.MEMID;"
      },
      {
        "id": 67,
        "origin": "WITH RECURSIVE RECOMMENDERS(RECOMMENDER) AS ( SELECT RECOMMENDEDBY FROM CD.MEMBERS WHERE MEMID = 27 UNION ALL SELECT MEMS.RECOMMENDEDBY FROM RECOMMENDERS RECS INNER JOIN CD.MEMBERS MEMS ON MEMS.MEMID = RECS.RECOMMENDER ) SELECT RECS.RECOMMENDER, MEMS.FIRSTNAME, MEMS.SURNAME FROM RECOMMENDERS RECS INNER JOIN CD.MEMBERS MEMS ON RECS.RECOMMENDER = MEMS.MEMID ORDER BY MEMID DESC;",
        "normalized": "WITH RECURSIVE RECOMMENDERS(RECOMMENDER) AS ( SELECT MEMBERS.RECOMMENDEDBY FROM CD.MEMBERS WHERE MEMBERS.MEMID = 27 UNION ALL SELECT MEMBERS.RECOMMENDEDBY FROM RECOMMENDERS INNER JOIN CD.MEMBERS ON MEMBERS.MEMID = RECOMMENDERS.RECOMMENDER ) SELECT RECOMMENDERS.RECOMMENDER, MEMBERS.FIRSTNAME, MEMBERS.SURNAME FROM RECOMMENDERS INNER JOIN CD.MEMBERS ON RECOMMENDERS.RECOMMENDER = MEMBERS.MEMID ORDER BY MEMBERS.MEMID DESC;"
      },
      {
        "id": 68,
        "origin": "WITH RECURSIVE RECOMMENDEDS(MEMID) AS ( SELECT MEMID FROM CD.MEMBERS WHERE RECOMMENDEDBY = 1 UNION ALL SELECT MEMS.MEMID FROM RECOMMENDEDS RECS INNER JOIN CD.MEMBERS MEMS ON MEMS.RECOMMENDEDBY = RECS.MEMID ) SELECT RECS.MEMID, MEMS.FIRSTNAME, MEMS.SURNAME FROM RECOMMENDEDS RECS INNER JOIN CD.MEMBERS MEMS ON RECS.MEMID = MEMS.MEMID ORDER BY MEMID;",
        "normalized": "WITH RECURSIVE RECOMMENDEDS(MEMBERS.MEMID) AS ( SELECT MEMBERS.MEMID FROM CD.MEMBERS WHERE MEMBERS.RECOMMENDEDBY = 1 UNION ALL SELECT MEMBERS.MEMID FROM RECOMMENDEDS INNER JOIN CD.MEMBERS ON MEMBERS.RECOMMENDEDBY = RECOMMENDEDS.MEMID ) SELECT RECOMMENDEDS.MEMID, MEMBERS.FIRSTNAME, MEMBERS.SURNAME FROM RECOMMENDEDS INNER JOIN CD.MEMBERS ON RECOMMENDEDS.MEMID = MEMBERS.MEMID ORDER BY MEMBERS.MEMID;"
      },
      {
        "id": 69,
        "origin": "WITH RECURSIVE RECOMMENDERS(RECOMMENDER, MEMBER) AS ( SELECT RECOMMENDEDBY, MEMID FROM CD.MEMBERS UNION ALL SELECT MEMS.RECOMMENDEDBY, RECS.MEMBER FROM RECOMMENDERS RECS INNER JOIN CD.MEMBERS MEMS ON MEMS.MEMID = RECS.RECOMMENDER ) SELECT RECS.MEMBER MEMBER, RECS.RECOMMENDER, MEMS.FIRSTNAME, MEMS.SURNAME FROM RECOMMENDERS RECS INNER JOIN CD.MEMBERS MEMS ON RECS.RECOMMENDER = MEMS.MEMID WHERE RECS.MEMBER = 22 OR RECS.MEMBER = 12 ORDER BY RECS.MEMBER ASC, RECS.RECOMMENDER DESC;",
        "normalized": "WITH RECURSIVE RECOMMENDERS(RECOMMENDER, MEMBER) AS ( SELECT MEMBERS.RECOMMENDEDBY, MEMBERS.MEMID FROM CD.MEMBERS UNION ALL SELECT MEMBERS.RECOMMENDEDBY, RECOMMENDERS.MEMBER FROM RECOMMENDERS INNER JOIN CD.MEMBERS ON MEMBERS.MEMID = RECOMMENDERS.RECOMMENDER ) SELECT RECOMMENDERS.MEMBER MEMBER, RECOMMENDERS.RECOMMENDER, MEMBERS.FIRSTNAME, MEMBERS.SURNAME FROM RECOMMENDERS INNER JOIN CD.MEMBERS ON RECOMMENDERS.RECOMMENDER = MEMBERS.MEMID WHERE RECOMMENDERS.MEMBER = 22 OR RECOMMENDERS.MEMBER = 12 ORDER BY RECOMMENDERS.MEMBER ASC, RECOMMENDERS.RECOMMENDER DESC;"
      }
    ]